[{"C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\App.js":"1","C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\index.js":"2","C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\reportWebVitals.js":"3","C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\components\\StatusTable.js":"4","C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\components\\Top.js":"5","C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\Updates.js":"6"},{"size":861,"mtime":1609028301576,"results":"7","hashOfConfig":"8"},{"size":547,"mtime":1609027361946,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1606278072237,"results":"10","hashOfConfig":"8"},{"size":8978,"mtime":1609080655367,"results":"11","hashOfConfig":"8"},{"size":10808,"mtime":1609094500436,"results":"12","hashOfConfig":"8"},{"size":4827,"mtime":1609023907489,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lemim9",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\App.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\index.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\reportWebVitals.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\components\\StatusTable.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\components\\Top.js",[],"C:\\Users\\wbmmu\\Desktop\\electron\\create-electron-app\\nubar-ping\\src\\Updates.js",["27"],"import React, { useEffect, useState } from 'react'\r\nconst { ipcRenderer } = window.require('electron')\r\n\r\nexport default function Updates() {\r\n    const [show, setShow] = useState(false)\r\n    const [popupContents, setPopupContents] = useState({\r\n        contents: []\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log('Top Of Updates')\r\n        ipcRenderer.on('checkingForUpdates', () => {\r\n            console.log('Checking for updates')\r\n        })\r\n\r\n        ipcRenderer.on('updateAvailable', () => {\r\n            console.log('Downloading update')\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    A new version is being downloaded\r\n                    <table style={{ width: '100%' }}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <progress style={{ width: '100%' }} max={100} value=\"0\" />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setShow(false)}>close</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n\r\n            setPopupContents(tempPopupContents)\r\n            setShow(true)\r\n        })\r\n\r\n        ipcRenderer.on('noUpdate', () => {\r\n            console.log('Up to date')\r\n        })\r\n\r\n        ipcRenderer.on('updateDownloaded', (e, releaseInfo) => {\r\n            console.log('Update Downloaded')\r\n            //console.log(releaseInfo)\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    <p>New update {\"v\" + releaseInfo.version} downloaded</p>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setPopupContents()}>Update on exit</button>\r\n                                </td>\r\n                                <td>\r\n                                    <button onClick={() => {\r\n                                        ipcRenderer.send('installUpdate')\r\n                                        setShow(false)\r\n                                    }}>Update and restart app now</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n\r\n            setPopupContents(tempPopupContents)\r\n            setShow(true)\r\n        })\r\n\r\n        ipcRenderer.on('updateError', (error) => {\r\n            console.log('Update Error', error,)\r\n        })\r\n\r\n        ipcRenderer.on('updateDownloadProgress', (e, progressPercent) => {\r\n            let tempPopupContents = { ...popupContents }\r\n            tempPopupContents.contents = (\r\n                <div>\r\n                    A new version is being downloaded\r\n                    <table style={{ width: '100%' }}>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <progress style={{ width: '100%' }} max=\"100\" value={Math.round(progressPercent).toString()} />\r\n                                </td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>\r\n                                    <button onClick={() => setShow(false)}>hide</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n            setPopupContents(tempPopupContents)\r\n        })\r\n\r\n        return () => {\r\n            ipcRenderer.removeAllListeners('checkingForUpdates')\r\n            ipcRenderer.removeAllListeners('updateAvailable')\r\n            ipcRenderer.removeAllListeners('noUpdate')\r\n            ipcRenderer.removeAllListeners('updateError')\r\n            ipcRenderer.removeAllListeners('updateDownloaded')\r\n            ipcRenderer.removeAllListeners('updateDownloadProgress')\r\n        }\r\n    }, [])\r\n\r\n    const makePopup = () => {\r\n        if (show === true) {\r\n            return (\r\n                <div style={{ position: 'fixed', bottom: '10px', right: '10px', backgroundColor: 'white', padding: '10px', boxShadow: '0px 0px 6px 2px', fontSize: '12px' }}>\r\n                    {popupContents.contents}\r\n                </div>\r\n            )\r\n        } else {\r\n            return <div></div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        makePopup()\r\n    )\r\n}\r\n",{"ruleId":"28","severity":1,"message":"29","line":112,"column":8,"nodeType":"30","endLine":112,"endColumn":10,"suggestions":"31"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'popupContents'. Either include it or remove the dependency array.","ArrayExpression",["32"],{"desc":"33","fix":"34"},"Update the dependencies array to be: [popupContents]",{"range":"35","text":"36"},[4362,4364],"[popupContents]"]